@model AMS.Models.Item

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var listItems = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["SubCategoriesLookup"] as IEnumerable<AMS.Models.SubCategory>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.NameEN;
        i.Value = item.Id.ToString();
        listItems.Add(i);
    }
    var listItems1 = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["ItemUnitsLookup"] as IEnumerable<AMS.Models.ItemUnit>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.Name;
        i.Value = item.Id.ToString();
        listItems1.Add(i);
    }
}
<div class="content_inner">
    <header class="content__title">
        <a class="btn btn-secondary btn--icon waves-effect" href="~/item"><span><i class="zmdi zmdi-arrow-back"></i></span></a>
    </header>
    <div class="card-block">
        <div class="row" style="width:230px;margin:auto">
            <div class="card profile">
                <div class="profile__img">
                    <img id="image_view" src="~/Content/images/placeholder.gif" alt="">
                    <form id="upload" method="post" enctype="multipart/form-data">
                        <label for="f_upload">
                            <span class="zmdi zmdi-camera profile__img__edit ctv" style="cursor:pointer;"></span>
                        </label>
                        <label style="display: none">
                            <input id="f_upload" type="file" class="btn btn-secondary" name="file_upload[]" multiple="multiple" />
                            <input type="submit" class="btn btn-default btn-sm file-upload" value="Upload" style="visibility:hidden" />
                        </label>
                    </form>
                    <div class="img-u-loader" style="display:none;"><img src="~/Content/loader.gif" style="position: absolute;top: 38%;left: 39%;height: 35px;border-radius: 50%;" /></div>

                </div>

            </div>
        </div>
    </div>
    <div class="card">
        <div class="card-block">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Barcode, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } })
                                @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.NameEN, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.NameEN, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NameEN, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.NameAR, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.NameAR, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.NameAR, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SubCategoryId, htmlAttributes: new { @class = "control-label" })
                            <div>

                                @Html.DropDownListFor(model => model.SubCategoryId, new SelectList(listItems, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SubCategoryId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Volume, htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.Volume, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Volume, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitId, htmlAttributes: new { @class = "control-label" })
                            <div>

                                @Html.DropDownListFor(model => model.UnitId, new SelectList(listItems1, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-4" style="visibility:hidden">
                        <div class="form-group">
                            @Html.EditorFor(model => model.ImageUrl, new { @class = "form-control m-logoUrl", style = "visibility:hidden" })
                            <i class="form-group__bar"></i>
                        </div>
                    </div>

                </div>
                    <div>
                        @Html.TextBoxFor(model => model.ImageUrl, new { @class = "form-control", style = "visibility:hidden" })
                        @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "text-danger" })
                    </div>
                <center>
                    <button type="submit" class="btn btn-outline-primary waves-effect">Create</button>
                </center>
            }

        </div>
    </div>
</div>

@section scripts{

    <script>
        $(document).ready(function () {
            $('#ploader').hide();
            var mLocation = new ManageLocation();
            var placeSearch, autocomplete;

            window.onload = function () {
                mLocation.initAutocomplete('buildingName', 'Latitude', 'Longitude');
            };


            $(':radio').on('change', function () {
                var display = ($(this).checked) ? 'none' : '';
                console.log($(this).val());
                if ($(this).val() != "Branch") {
                    $('#IsBranch').val(0);
                    $('.isBranch').hide();
                }
                else
                    $('.isBranch').show();
            });


            $("#generate-pass").click(function () {
                $("#pass-txt").val(guid())
            });
            $("#generate-smscode").click(function () {
                $("#sms-txt").val(Math.floor(1000 + Math.random() * 9000))
            });
            $('#f_upload').on('change', prepareUpload);
            function prepareUpload(event) {

                var files = event.target.files;
                if (files.length > 0) {
                    $("form#upload").submit();
                }
            }
            $("form#upload").submit(function () {
                $('.img-u-loader').show();
                var files = this.f_upload.files.length
                if (files == 0) {
                    alert('Please Choose files first');
                    return false;
                }
                if (this.f_upload.files[0].size > 81920) {
                    alert('Please Choose file its size lower than 80k first');
                    $('.img-u-loader').css('display', '');
                    return false;
                }
                var formData = new FormData(this);
                $.ajax({
                    url: WeeloApi + 'upload/product/image',
                    type: 'POST',
                    headers: requestHeaders(),
                    data: formData,
                    async: false,
                    success: function (res) {
                        var list, vType;
                        var types = ['png', 'jpg', 'jpeg'];
                        for (var i = 0; i < res.data.length; i++) {
                            if (res.data[i].status == 200) {
                                console.log(res.data[i].url);
                                $("#image_view").attr('src', res.data[i].url);
                                $('#ImageUrl').val(res.data[i].url);
                                //var img = new Image();
                                //img.id = "itemPic";
                                //img.style.height = "100%";
                                //img.src = res.data[i].url;
                                //$("#new_bgd").empty().append(img);
                            }
                            else {
                                alert(res.data[i].Message);
                            }
                            $("#new_imageLoader").val('');
                        }
                        $('.img-u-loader').hide();
                    },
                    xhr: function () {
                        var xhr = $.ajaxSettings.xhr();
                        xhr.upload.onprogress = function (evt) { };
                        xhr.upload.onload = function () { console.log('DONE!') };
                        return xhr;
                    },
                    cache: false,
                    contentType: false,
                    processData: false,
                    async: true
                });
                return false;
            });
        })

    </script>

}