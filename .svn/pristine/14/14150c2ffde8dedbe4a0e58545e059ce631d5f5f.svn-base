@model AMS.Models.Merchant

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var listItems = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["CountriesLookup"] as IEnumerable<AMS.Models.Country>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.Name;
        i.Value = item.Id.ToString();
        listItems.Add(i);
    }

    var languageLookup = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["LanguageLookup"] as IEnumerable<AMS.Models.Language>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.Name;
        i.Value = item.Id.ToString();
        languageLookup.Add(i);
    }

    var listItems3 = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["AccountStateLookup"] as IEnumerable<AMS.Models.AccountState>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.State;
        i.Value = item.Id.ToString();
        listItems3.Add(i);
    }
    var listItems4 = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["CurrenciesLookup"] as IEnumerable<AMS.Models.Currency>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.Name;
        i.Value = item.Id.ToString();
        listItems4.Add(i);
    }
    var mainSubM = new List<System.Web.UI.WebControls.ListItem>();
    foreach (var item in ViewData["mainSubMLookup"] as IEnumerable<AMS.Models.Merchant>)
    {
        var i = new System.Web.UI.WebControls.ListItem();
        i.Text = item.NameEN;
        i.Value = item.Id.ToString();
        mainSubM.Add(i);
    }
}

<style>
    select {
        width: 100%;
    }
</style>

<div class="content_inner">
    <header class="content__title">
        <a class="btn btn-secondary btn--icon waves-effect" href="~/merchant"><span><i class="zmdi zmdi-arrow-back"></i></span></a>

    </header>
    <div class="card">
        <div class="card-block">
            <div style="margin:auto">
                    <div class="form-horizontal">
                        <div class="card-block">
                            <div class="row" style="width:230px;margin:auto">
                                <div class="card profile">
                                    <div class="profile__img">
                                        <img id="image_view" src="~/Content/images/placeholder.gif" alt="">
                                        <form id="upload" method="post" enctype="multipart/form-data">
                                            <label for="f_upload">
                                                <span class="zmdi zmdi-camera profile__img__edit ctv" style="cursor:pointer;"></span>
                                            </label>
                                            <label style="display: none">
                                                <input id="f_upload" type="file" class="btn btn-secondary" name="file_upload[]" multiple="multiple" />
                                                <input type="submit" class="btn btn-default btn-sm file-upload" value="Upload" style="visibility:hidden" />
                                            </label>
                                        </form>
                                        <div class="img-u-loader" style="display:none;"><img src="~/Content/loader.gif" style="position: absolute;top: 38%;left: 39%;height: 35px;border-radius: 50%;" /></div>

                                    </div>

                                </div>
                            </div>
                        </div>
                        @using (Html.BeginForm())
            {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="card-block">

                                <div class="row">
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NameEN, htmlAttributes: new { @class = "" })
                                            @Html.EditorFor(model => model.NameEN, new { htmlAttributes = new { @class = "form-control input-mask" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.NameEN, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NameAR, htmlAttributes: new { @class = "" })
                                            @Html.EditorFor(model => model.NameAR, new { htmlAttributes = new { @class = "form-control input-mask" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.NameAR, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label input-mask" })
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control " } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label input-mask" }) @*<a id="generate-pass" style="cursor:pointer">Generate</a>*@
                                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @type = "Password", @class = "form-control", @id = "pass-txt" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ShortPassword, htmlAttributes: new { @class = "control-label input-mask" }) <a id="generate-shrtpass" style="cursor:pointer; color:blue;">Generate</a>
                                            @Html.EditorFor(model => model.ShortPassword, new { htmlAttributes = new { @type = "text", @class = "form-control ", @readonly = "readonly" , @id = "shrt-pass" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ShortPassword, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SmsCode, htmlAttributes: new { @class = "" }) <a id="generate-smscode" style="cursor:pointer; color:blue;">Generate</a>
                                            @Html.EditorFor(model => model.SmsCode, new { htmlAttributes = new { @class = "form-control", @id = "sms-txt", @readonly = "readonly" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.SmsCode, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label input-mask" })
                                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control " } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger form-control-danger" })
                                    </div>
                                    <div class="col-md-3 col-sm-3 col-xs-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label input-mask" }) @*<a id="generate-pass" style="cursor:pointer">Generate</a>*@
                                            @Html.DropDownListFor(model => model.CountryId, new SelectList(listItems, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3 col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.LangId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.LangId, new SelectList(languageLookup, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.LangId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3 col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.AccountStateId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.AccountStateId, new SelectList(listItems3, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.AccountStateId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-3 col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.CurrencyId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.CurrencyId, new SelectList(listItems4, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.CurrencyId, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.Label("Location Name", htmlAttributes: new { @class = "control-label" })
                                            @Html.Editor("Location Name", new { htmlAttributes = new { @class = "form-control input-mask", @id = "buildingName" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessage("Location Name", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DeliveryTime, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.DeliveryTime, new { htmlAttributes = new { @class = "form-control" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.DeliveryTime, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ServiceFees, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.ServiceFees, new { htmlAttributes = new { @class = "form-control", } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ServiceFees, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control",} })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.MinOrder, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.MinOrder, new { htmlAttributes = new { @class = "form-control", } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.MinOrder, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", id = "Latitude", @readonly = "readonly" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", id = "Longitude", @readonly = "readonly" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Percentage, htmlAttributes: new { @class = "control-label" })
                                            @Html.EditorFor(model => model.Percentage, new { htmlAttributes = new { @class = "form-control" } })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.Percentage, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-sm-3" style="visibility:hidden">
                                        <div class="form-group">
                                            @Html.EditorFor(model => model.LogoUrl, new { @class = "form-control m-logoUrl", style = "visibility:hidden" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.LogoUrl, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="col-sm-3">
                                        <label class="custom-control custom-radio">
                                            <input type="radio" value="Branch" name="radio-inline" class="custom-control-input Branch">
                                            <span class="custom-control-indicator"></span>
                                            <span class="custom-control-description">Branch</span>
                                        </label>
                                    </div>
                                    <div class="col-sm-3">
                                        <label class="custom-control custom-radio">
                                            <input type="radio" name="radio-inline" class="custom-control-input" value="Main">
                                            <span class="custom-control-indicator"></span>
                                            <span class="custom-control-description">Main</span>
                                        </label>
                                    </div>
                                    <div class="col-sm-3 isBranch" style="display:none;">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.IsBranch, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(model => model.IsBranch, new SelectList(mainSubM, "Value", "Text"), "--Select--", new { @class = "form-control" })
                                            <i class="form-group__bar"></i>
                                        </div>
                                        @Html.ValidationMessageFor(model => model.IsBranch, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div>
                                <center>
                                    <button type="submit" class="btn btn-outline-primary waves-effect">Edit</button>
                                </center>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>


@section scripts{

    <script>
        window.onload=function () {
            if ($('#LogoUrl').val())
                $("#image_view").attr('src', $('#LogoUrl').val());

            if ($('#IsBranch').val()) {
                $(":radio[value=Branch]").prop("checked", "true");
                $('.isBranch').show();
            } else {
                $(":radio[value=Main]").prop("checked", "true");
            }


            $(':radio').on('change', function () {
                var display = ($(this).checked) ? 'none' : '';
                if ($(this).val() != "Branch") {
                    $('#IsBranch').val(0);
                    $('.isBranch').hide();
                }
                else
                    $('.isBranch').show();
            });

            $('#ploader').hide();
            var mLocation = new ManageLocation();
            var placeSearch, autocomplete;

            window.onload = function () {
                mLocation.initAutocomplete('buildingName', 'Latitude', 'Longitude');
            };

            $("#generate-pass").click(function () {
                $("#pass-txt").val(guid())
            });
            $("#generate-smscode").click(function () {
                $("#sms-txt").val(Math.floor(1000 + Math.random() * 9000))
            });
            $("#generate-shrtpass").on('click', function () {
                console.log(Math.floor(1000 + Math.random() * 9000));
                $("#shrt-pass").val(Math.floor(1000 + Math.random() * 9000))
            });
            $('#f_upload').on('change', prepareUpload);
            function prepareUpload(event) {

                var files = event.target.files;
                if (files.length > 0) {
                    $("form#upload").submit();
                }
            }
            $("form#upload").submit(function () {
                $('.img-u-loader').show();
                var files = this.f_upload.files.length
                if (files == 0) {
                    alert('Please Choose files first');
                    return false;
                }
                if (this.f_upload.files[0].size > 81920) {
                    alert('Please Choose file its size lower than 80k first');
                    $('.img-u-loader').css('display', '');
                    return false;
                }
                var formData = new FormData(this);
                $.ajax({
                    url: WeeloApi + 'upload/product/image',
                    type: 'POST',
                    headers: requestHeaders(),
                    data: formData,
                    async: false,
                    success: function (res) {
                        var list, vType;
                        var types = ['png', 'jpg', 'jpeg'];
                        for (var i = 0; i < res.data.length; i++) {
                            if (res.data[i].status == 200) {
                                console.log(res.data[i].url);
                                $("#image_view").attr('src', res.data[i].url);
                                $('#LogoUrl').val(res.data[i].url);
                                //var img = new Image();
                                //img.id = "itemPic";
                                //img.style.height = "100%";
                                //img.src = res.data[i].url;
                                //$("#new_bgd").empty().append(img);
                            }
                            else {
                                alert(res.data[i].Message);
                            }
                            $("#new_imageLoader").val('');
                        }
                        $('.img-u-loader').hide();
                    },
                    xhr: function () {
                        var xhr = $.ajaxSettings.xhr();
                        xhr.upload.onprogress = function (evt) { };
                        xhr.upload.onload = function () { console.log('DONE!') };
                        return xhr;
                    },
                    cache: false,
                    contentType: false,
                    processData: false,
                    async: true
                });
                return false;
            });
            function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000)
                      .toString(16)
                      .substring(1);
                }
                return s4() + s4() + s4() + s4() + s4();
            }
        }

    </script>

}
