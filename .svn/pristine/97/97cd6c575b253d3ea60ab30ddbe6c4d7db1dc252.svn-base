using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using AMS.Context;
using AMS.Models.Models;
using AMS.Models;

namespace AMS.Controllers
{
    public class MerchantCouponsController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: MerchantCoupons
        public async Task<ActionResult> Index()
        {
            var mCoupones = await db.MerchantCoupons.ToListAsync();
            var results = new List<MerchantCouponDetails>();
            var merchants = db.Merchants.ToList();
            var cTypes = db.MerchantCouponTypes.ToList();

            foreach (var item in mCoupones)
            {
                results.Add(new MerchantCouponDetails
                {
                    Amount = item.Amount,
                    CouponeText = item.CouponId,
                    CouponeTypeName = cTypes.FirstOrDefault(e => e.Id == item.TypeId).Name,
                    MerchantName = merchants.FirstOrDefault(e => e.Id == item.MerchantId).NameEN,
                    Id = item.Id,
                    CreationDate = item.CreationDate,
                    ExpiryDate = item.ExpiryDate
                });
            }

            return View(results);
        }

        // GET: MerchantCoupons/Details/5
        public async Task<ActionResult> Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            MerchantCoupon merchantCoupon = await db.MerchantCoupons.FindAsync(id);
            if (merchantCoupon == null)
            {
                return HttpNotFound();
            }
            return View(merchantCoupon);
        }

        // GET: MerchantCoupons/Create
        public ActionResult Create()
        {
            ViewData["MerchantsLookup"] =  db.Merchants.ToList();
            ViewData["TypesLookup"] =  db.MerchantCouponTypes.ToList();

            return View();
        }

        // POST: MerchantCoupons/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create([Bind(Include = "Id,CouponId,Amount,TypeId,MerchantId,ExpiryDate")] MerchantCoupon merchantCoupon)
        {
            if (ModelState.IsValid)
            {
                merchantCoupon.CreationDate = DateTime.UtcNow;
                db.MerchantCoupons.Add(merchantCoupon);
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }

            return View(merchantCoupon);
        }

        // GET: MerchantCoupons/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            ViewData["MerchantsLookup"] = db.Merchants.ToList();
            ViewData["TypesLookup"] = db.MerchantCouponTypes.ToList();

            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            MerchantCoupon merchantCoupon = await db.MerchantCoupons.FindAsync(id);
            if (merchantCoupon == null)
            {
                return HttpNotFound();
            }
            return View(merchantCoupon);
        }

        // POST: MerchantCoupons/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "Id,CouponId,Amount,TypeId,MerchantId,ExpiryDate")] MerchantCoupon merchantCoupon)
        {
            if (ModelState.IsValid)
            {
                db.Entry(merchantCoupon).State = EntityState.Modified;
                db.Entry(merchantCoupon).Property(p => p.CreationDate).IsModified = false;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }
            return View(merchantCoupon);
        }

        // GET: MerchantCoupons/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            MerchantCoupon merchantCoupon = await db.MerchantCoupons.FindAsync(id);
            if (merchantCoupon == null)
            {
                return HttpNotFound();
            }
            return View(merchantCoupon);
        }

        // POST: MerchantCoupons/Delete/5
        [HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int id)
        {
            MerchantCoupon merchantCoupon = await db.MerchantCoupons.FindAsync(id);
            db.MerchantCoupons.Remove(merchantCoupon);
            await db.SaveChangesAsync();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
